name: Windows Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up MSVC dev cmd
      uses: ilammy/msvc-dev-cmd@v1
    - name: Fetch qrcodegen sources
      shell: pwsh
      run: |
        Invoke-WebRequest 'https://raw.githubusercontent.com/nayuki/QR-Code-generator/refs/heads/master/cpp/qrcodegen.hpp' -OutFile qrcodegen.hpp
        Invoke-WebRequest 'https://raw.githubusercontent.com/nayuki/QR-Code-generator/refs/heads/master/cpp/qrcodegen.cpp' -OutFile qrcodegen.cpp
    - name: Create build dirs
      shell: cmd
      run: |
        if not exist build mkdir build
        if not exist obj   mkdir obj
    - name: Build application
      shell: cmd
      run: |
        cl /EHsc /std:c++20 /permissive- /I. /DUNICODE /D_UNICODE ^
           cli_args_debugger.cpp seh_wrapper.cpp qrcodegen.cpp ^
           /Fe:build\cloud-streaming-args-debugger.exe ^
           /Fo:obj\ ^
           /link d3d11.lib d3dcompiler.lib d2d1.lib dwrite.lib ole32.lib avrt.lib user32.lib shell32.lib gdi32.lib propsys.lib
    - name: Package into zip
      shell: pwsh
      run: |
        Compress-Archive -Path build\* -DestinationPath build\cloud-streaming-args-debugger.zip -Force
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: cloud-streaming-args-debugger-build
        path: build
    - name: Commit build folder
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: EndBug/add-and-commit@v9
      env:
        HOME: ${{ github.workspace }}
      with:
        add: 'build -f'
        message: 'chore(build): auto-build ${{ github.sha }} [skip ci]'
        default_author: github_actions

  test:
    needs: build
    runs-on: windows-latest
    env:
      VCPKG_DEFAULT_TRIPLET: x64-windows
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up MSVC dev cmd
      uses: ilammy/msvc-dev-cmd@v1
    
    - name: Fetch qrcodegen sources
      shell: pwsh
      run: |
        Invoke-WebRequest 'https://raw.githubusercontent.com/nayuki/QR-Code-generator/refs/heads/master/cpp/qrcodegen.hpp' -OutFile qrcodegen.hpp
        Invoke-WebRequest 'https://raw.githubusercontent.com/nayuki/QR-Code-generator/refs/heads/master/cpp/qrcodegen.cpp' -OutFile qrcodegen.cpp

    - name: Cache vcpkg
      uses: actions/cache@v3
      with:
        path: |
          vcpkg/installed
          vcpkg/packages
        key: ${{ runner.os }}-vcpkg-classic
        restore-keys: |
          ${{ runner.os }}-vcpkg-
    
    - name: Setup vcpkg & install GoogleTest (classic mode)
      shell: pwsh
      run: |
        # Remove any existing vcpkg directory if present
        if (Test-Path -Path "vcpkg") {
            Remove-Item -Path "vcpkg" -Recurse -Force
        }
        
        # Clone vcpkg repository
        git clone https://github.com/microsoft/vcpkg.git
        
        # Bootstrap vcpkg
        Set-Location -Path vcpkg
        & .\bootstrap-vcpkg.bat
        
        # Install GoogleTest in classic mode
        & .\vcpkg.exe install gtest:x64-windows --classic
        
        # Return to the original directory
        Set-Location -Path ${{ github.workspace }}
        
    - name: Configure & build with CMake
      shell: pwsh
      run: |
        $toolchain = "${{ github.workspace }}\vcpkg\scripts\buildsystems\vcpkg.cmake"
        cmake -B build -S . `
          -DCMAKE_TOOLCHAIN_FILE="$toolchain" `
          -DVCPKG_MANIFEST_MODE=OFF `
          -DCMAKE_WIN32_EXECUTABLE=OFF
        cmake --build build --config Release
      
    - name: Run tests
      shell: pwsh
      run: |
        cd build
        ctest -C Release -V
      
    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      with:
        name: cloud-streaming-args-debugger-tests
        path: build/tests